<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateMissedProfileProperties.Text" xml:space="preserve">
    <value>Create Missed Profile Properties</value>
  </data>
  <data name="Example.Text" xml:space="preserve">
    <value>Example Excel File</value>
  </data>
  <data name="ExampleCSV.Text" xml:space="preserve">
    <value>Example of CSV file</value>
  </data>
  <data name="Examples.Text" xml:space="preserve">
    <value>Examples:</value>
  </data>
  <data name="ExampleXML.Text" xml:space="preserve">
    <value>Example of XML file</value>
  </data>
  <data name="ExportFileType.Text" xml:space="preserve">
    <value>Export File Type</value>
  </data>
  <data name="ExportFileType_0.Text" xml:space="preserve">
    <value>Excel</value>
  </data>
  <data name="ExportFileType_1.Text" xml:space="preserve">
    <value>XML</value>
  </data>
  <data name="ExportFileType_2.Text" xml:space="preserve">
    <value>CSV</value>
  </data>
  <data name="ExportPasswords.Text" xml:space="preserve">
    <value>Export Passwords</value>
  </data>
  <data name="ExportPasswordsDisabled.Text" xml:space="preserve">
    <value>Export Passwords disabled for this portal, because enablePasswordRetrieval="false" in web.config file.</value>
  </data>
  <data name="ExportRoles.Text" xml:space="preserve">
    <value>Export Roles</value>
  </data>
  <data name="ExportUsers.Text" xml:space="preserve">
    <value>Export Users</value>
  </data>
  <data name="ForcePasswordChange.Text" xml:space="preserve">
    <value>Set "Force Password Change On" on import</value>
  </data>
  <data name="Import.Text" xml:space="preserve">
    <value>Select File for Import:</value>
  </data>
  <data name="ImportFileMissed.Text" xml:space="preserve">
    <value>Import File is Missed!</value>
  </data>
  <data name="ImportProfileProperties.Text" xml:space="preserve">
    <value>Import Profile Properties</value>
  </data>
  <data name="ImportRoles0.Text" xml:space="preserve">
    <value>Do not import roles</value>
  </data>
  <data name="ImportRoles1.Text" xml:space="preserve">
    <value>Import roles by RoleID from the "RoleIDs" column</value>
  </data>
  <data name="ImportRoles2.Text" xml:space="preserve">
    <value>Import roles by RoleName from the "Roles" column</value>
  </data>
  <data name="ImportUsers.Text" xml:space="preserve">
    <value>Import Users</value>
  </data>
  <data name="IncludeDeleted.Text" xml:space="preserve">
    <value>Include Deleted Accounts</value>
  </data>
  <data name="IncludeNonAuthorised.Text" xml:space="preserve">
    <value>Include Non Authorised Accounts</value>
  </data>
  <data name="IncludeSuperUsers.Text" xml:space="preserve">
    <value>Include SuperUsers</value>
  </data>
  <data name="PropertiesToExport.Text" xml:space="preserve">
    <value>List of profile properties to export (check/uncheck all):</value>
  </data>
  <data name="RandomPassword.Text" xml:space="preserve">
    <value>Generate random passwords on import</value>
  </data>
  <data name="Result.Text" xml:space="preserve">
    <value>Total users to import: {0}&lt;br&gt;Success users have been imported: {1}&lt;br/&gt;{2}</value>
  </data>
  <data name="RoleIDNotFound.Text" xml:space="preserve">
    <value>RoleID={0} not found &lt;br/&gt;</value>
  </data>
  <data name="RoleNameNotFound.Text" xml:space="preserve">
    <value>RoleName={0} not found &lt;br/&gt;</value>
  </data>
  <data name="RowException.Text" xml:space="preserve">
    <value>Line {0}. Import error "{1}"&lt;br/&gt;</value>
  </data>
  <data name="RowMembershipError.Text" xml:space="preserve">
    <value>Line {0}, UserName={1}. Import error "{2}"&lt;br/&gt;</value>
  </data>
  <data name="UpdateRolesError.Text" xml:space="preserve">
    <value>Line {0}, UserID={1}, updating roles error "{2}"&lt;br/&gt;</value>
  </data>
  <data name="CreateMissedProfileProperties.Help" xml:space="preserve">
    <value>When checked and due import process any profile property is absent for current portal, then this profile property will be automatically added.</value>
  </data>
  <data name="EmailUser.Help" xml:space="preserve">
    <value>On success import an email will be sent to the user. Templates for subject and body can be defined in the localization "EmailUserSubject" and "EmailUserBody" entries. In the template can be used standard DNN tokens, like: [Portal:PortalName], [User:DisplayName], etc. For new generated passwords please use token [User:Password].</value>
  </data>
  <data name="EmailUser.Text" xml:space="preserve">
    <value>Email user after import</value>
  </data>
  <data name="EmailUserBody.Text" xml:space="preserve">
    <value>Dear [User:DisplayName] your new password for [Portal:PortalName] is &lt;b&gt;[User:Password]&lt;/b&gt;</value>
  </data>
  <data name="EmailUserSubject.Text" xml:space="preserve">
    <value>You have new password for [Portal:PortalName]</value>
  </data>
  <data name="Examples.Help" xml:space="preserve">
    <value>Examples of the files to import.</value>
  </data>
  <data name="ExportFileType.Help" xml:space="preserve">
    <value>Type of file data will be exported to. There are 2 possible types: CSV and XML.</value>
  </data>
  <data name="ExportPasswords.Help" xml:space="preserve">
    <value>Allows to export passwords. This option is available only when "enablePasswordRetrieval" in web.config is "true".</value>
  </data>
  <data name="ExportRoles.Help" xml:space="preserve">
    <value>Check this to include users roles into the exported list. When checked, resulted list will contain two extra fields: "RoleIDs" (contains comma delimited RoleIDs) and Roles (contains comma delimited RoleNames).</value>
  </data>
  <data name="ForcePasswordChange.Help" xml:space="preserve">
    <value>When checked it sets "Force Password Change On" for all imported users, so users must change password on next login.</value>
  </data>
  <data name="Import.Help" xml:space="preserve">
    <value>File with users list to import.</value>
  </data>
  <data name="ImportProfileProperties.Help" xml:space="preserve">
    <value>Check this to import users profile properties.</value>
  </data>
  <data name="ImportRoles.Help" xml:space="preserve">
    <value>The method how roles should be imported.</value>
  </data>
  <data name="ImportRoles.Text" xml:space="preserve">
    <value>Import roles</value>
  </data>
  <data name="IncludeDeleted.Help" xml:space="preserve">
    <value>Check this to include users accounts marked as "Deleted" into the exported list.</value>
  </data>
  <data name="IncludeNonAuthorised.Help" xml:space="preserve">
    <value>Check this to include non-authorised users accounts into the exported list.</value>
  </data>
  <data name="IncludeSuperUsers.Help" xml:space="preserve">
    <value>Check this to include SuperUsers accounts into the exported list.</value>
  </data>
  <data name="PropertiesToExport.Help" xml:space="preserve">
    <value>Possible to define what users profile properties to include into the exported list.</value>
  </data>
  <data name="RandomPassword.Help" xml:space="preserve">
    <value>When checked it generates random password for all imported users.</value>
  </data>
  <data name="SendEmailException.Text" xml:space="preserve">
    <value>Line {0}, UserID={1}, SendEmail exception "{2}"&lt;br/&gt;</value>
  </data>
  <data name="SendEmailInvalidEmailException.Text" xml:space="preserve">
    <value>Line {0}, UserID={1}, SendEmail exception due wrong email format "{2}"&lt;br/&gt;</value>
  </data>
  <data name="MaxAllowedFileSize.Text" xml:space="preserve">
    <value>Max allowed file size for upload is {0}</value>
  </data>
  <data name="ExportInProgress.Text" xml:space="preserve">
    <value>Export in progress...</value>
  </data>
  <data name="Line.Text" xml:space="preserve">
    <value>Line {0}:</value>
  </data>
  <data name="UserDeniedToImportRole.Text" xml:space="preserve">
    <value>User "{0}" is denied to import "{1}"&lt;br/&gt;</value>
  </data>
</root>